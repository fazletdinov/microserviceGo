version: '3.9'

x-def-logging: &default-logging
  logging:
    # Указываем, какой драйвер использовать
    driver: "loki"
    options:
      # Адрес Loki, куда складывать логи
      # Обратите внимание, что здесь используется не имя сервиса loki, а локальный хост, на который проброшен порт Loki,
      # это сделано потому, что логи будет писать docker engine, котрый расположен на хостовой машине,
      # и он не знает имени хоста контейнера Loki, которое ему присвоил compose во внутренней сети проекта.
      loki-url: "http://localhost:3100/loki/api/v1/push"
      loki-batch-size: "100"
      loki-retries: 2
      loki-max-backoff: 1000ms
      loki-timeout: 1s

services:
  # mongo_auth_db:
  #   image: mongo:latest
  #   container_name: mongo_auth_db
  #   command: mongod --port ${MONGO_PORT}
  #   # ports:
  #   #   - ${MONGO_PORT}:${MONGO_PORT}
  #   volumes:
  #     - mongo-auth-data:/data/db
  #   networks:
  #     - dev-network
  #   env_file:
  #     - .env
    
  postgres_auth_db:
    container_name: postgres_auth_db
    image: postgres:15-alpine
    <<: *default-logging
    restart: always
    volumes:
      - pg-auth-data:/var/lib/postgresql/data
    networks:
      - dev-network
    env_file:
      - .env
    ports:
      - "5432:5432"
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 30s
      interval: 30s
      timeout: 30s
      retries: 3

  auth:
    container_name: auth
    build: ./
    <<: *default-logging
    networks:
      - dev-network
    expose:
      - ${AUTH_GRPC_PORT}
    depends_on:
      # - mongo_auth_db
      postgres_auth_db:
        condition: service_healthy
        restart: true
    env_file: 
      - .env


volumes:
  mongo-auth-data:
  pg-auth-data:

networks:
  dev-network:
    name: api-gateway_dev-network
    external: true