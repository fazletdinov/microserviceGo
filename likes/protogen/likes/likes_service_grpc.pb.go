// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: likes/likes_service.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GatewayLikes_CreateReaction_FullMethodName  = "/likes.GatewayLikes/CreateReaction"
	GatewayLikes_GetReactions_FullMethodName    = "/likes.GatewayLikes/GetReactions"
	GatewayLikes_DeleteReaction_FullMethodName  = "/likes.GatewayLikes/DeleteReaction"
	GatewayLikes_GetReactionByID_FullMethodName = "/likes.GatewayLikes/GetReactionByID"
)

// GatewayLikesClient is the client API for GatewayLikes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayLikesClient interface {
	CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*CreateReactionResponse, error)
	GetReactions(ctx context.Context, in *GetReactionsRequest, opts ...grpc.CallOption) (*GetReactionsResponse, error)
	DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*DeleteReactionResponse, error)
	GetReactionByID(ctx context.Context, in *GetReactionRequest, opts ...grpc.CallOption) (*GetReactionResponse, error)
}

type gatewayLikesClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayLikesClient(cc grpc.ClientConnInterface) GatewayLikesClient {
	return &gatewayLikesClient{cc}
}

func (c *gatewayLikesClient) CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*CreateReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReactionResponse)
	err := c.cc.Invoke(ctx, GatewayLikes_CreateReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayLikesClient) GetReactions(ctx context.Context, in *GetReactionsRequest, opts ...grpc.CallOption) (*GetReactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReactionsResponse)
	err := c.cc.Invoke(ctx, GatewayLikes_GetReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayLikesClient) DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*DeleteReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReactionResponse)
	err := c.cc.Invoke(ctx, GatewayLikes_DeleteReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayLikesClient) GetReactionByID(ctx context.Context, in *GetReactionRequest, opts ...grpc.CallOption) (*GetReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReactionResponse)
	err := c.cc.Invoke(ctx, GatewayLikes_GetReactionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayLikesServer is the server API for GatewayLikes service.
// All implementations must embed UnimplementedGatewayLikesServer
// for forward compatibility
type GatewayLikesServer interface {
	CreateReaction(context.Context, *CreateReactionRequest) (*CreateReactionResponse, error)
	GetReactions(context.Context, *GetReactionsRequest) (*GetReactionsResponse, error)
	DeleteReaction(context.Context, *DeleteReactionRequest) (*DeleteReactionResponse, error)
	GetReactionByID(context.Context, *GetReactionRequest) (*GetReactionResponse, error)
	mustEmbedUnimplementedGatewayLikesServer()
}

// UnimplementedGatewayLikesServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayLikesServer struct {
}

func (UnimplementedGatewayLikesServer) CreateReaction(context.Context, *CreateReactionRequest) (*CreateReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaction not implemented")
}
func (UnimplementedGatewayLikesServer) GetReactions(context.Context, *GetReactionsRequest) (*GetReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactions not implemented")
}
func (UnimplementedGatewayLikesServer) DeleteReaction(context.Context, *DeleteReactionRequest) (*DeleteReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReaction not implemented")
}
func (UnimplementedGatewayLikesServer) GetReactionByID(context.Context, *GetReactionRequest) (*GetReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactionByID not implemented")
}
func (UnimplementedGatewayLikesServer) mustEmbedUnimplementedGatewayLikesServer() {}

// UnsafeGatewayLikesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayLikesServer will
// result in compilation errors.
type UnsafeGatewayLikesServer interface {
	mustEmbedUnimplementedGatewayLikesServer()
}

func RegisterGatewayLikesServer(s grpc.ServiceRegistrar, srv GatewayLikesServer) {
	s.RegisterService(&GatewayLikes_ServiceDesc, srv)
}

func _GatewayLikes_CreateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLikesServer).CreateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayLikes_CreateReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLikesServer).CreateReaction(ctx, req.(*CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayLikes_GetReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLikesServer).GetReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayLikes_GetReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLikesServer).GetReactions(ctx, req.(*GetReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayLikes_DeleteReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLikesServer).DeleteReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayLikes_DeleteReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLikesServer).DeleteReaction(ctx, req.(*DeleteReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayLikes_GetReactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLikesServer).GetReactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayLikes_GetReactionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLikesServer).GetReactionByID(ctx, req.(*GetReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayLikes_ServiceDesc is the grpc.ServiceDesc for GatewayLikes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayLikes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "likes.GatewayLikes",
	HandlerType: (*GatewayLikesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReaction",
			Handler:    _GatewayLikes_CreateReaction_Handler,
		},
		{
			MethodName: "GetReactions",
			Handler:    _GatewayLikes_GetReactions_Handler,
		},
		{
			MethodName: "DeleteReaction",
			Handler:    _GatewayLikes_DeleteReaction_Handler,
		},
		{
			MethodName: "GetReactionByID",
			Handler:    _GatewayLikes_GetReactionByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "likes/likes_service.proto",
}
